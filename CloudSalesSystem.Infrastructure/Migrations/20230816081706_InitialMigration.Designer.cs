// <auto-generated />
using System;
using CloudSalesSystem.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CloudSalesSystem.Infrastructure.Migrations
{
    [DbContext(typeof(CloudSalesSystemDbContext))]
    [Migration("20230816081706_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CloudSalesSystem.Domain.Accounts.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_accounts");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_accounts_customer_id");

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("CloudSalesSystem.Domain.CustomerSubscriptions.CustomerSubscription", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscription_id");

                    b.HasKey("CustomerId", "SubscriptionId")
                        .HasName("pk_customer_subscriptions");

                    b.HasIndex("SubscriptionId")
                        .HasDatabaseName("ix_customer_subscriptions_subscription_id");

                    b.ToTable("customer_subscriptions", (string)null);
                });

            modelBuilder.Entity("CloudSalesSystem.Domain.Customers.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_customers");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("CloudSalesSystem.Domain.Licenses.License", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Key")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("key");

                    b.Property<Guid>("SubscriptionItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscription_item_id");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_licenses");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_licenses_account_id");

                    b.HasIndex("SubscriptionItemId")
                        .HasDatabaseName("ix_licenses_subscription_item_id");

                    b.ToTable("licenses", (string)null);
                });

            modelBuilder.Entity("CloudSalesSystem.Domain.SubscriptionItems.SubscriptionItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_name");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscription_id");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.Property<DateOnly>("ValidToDate")
                        .HasColumnType("date")
                        .HasColumnName("valid_to_date");

                    b.HasKey("Id")
                        .HasName("pk_subscription_items");

                    b.HasIndex("SubscriptionId")
                        .HasDatabaseName("ix_subscription_items_subscription_id");

                    b.ToTable("subscription_items", (string)null);
                });

            modelBuilder.Entity("CloudSalesSystem.Domain.Subscriptions.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_subscriptions");

                    b.ToTable("subscriptions", (string)null);
                });

            modelBuilder.Entity("CloudSalesSystem.Domain.Accounts.Account", b =>
                {
                    b.HasOne("CloudSalesSystem.Domain.Customers.Customer", "Customer")
                        .WithMany("Accounts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_accounts_customer_customer_id");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CloudSalesSystem.Domain.CustomerSubscriptions.CustomerSubscription", b =>
                {
                    b.HasOne("CloudSalesSystem.Domain.Customers.Customer", "Customer")
                        .WithMany("CustomerSubscriptions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_customer_subscriptions_customers_customer_id");

                    b.HasOne("CloudSalesSystem.Domain.Subscriptions.Subscription", "Subscription")
                        .WithMany("CustomerSubscriptions")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_customer_subscriptions_subscription_subscription_id");

                    b.Navigation("Customer");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("CloudSalesSystem.Domain.Licenses.License", b =>
                {
                    b.HasOne("CloudSalesSystem.Domain.Accounts.Account", "Account")
                        .WithMany("Licenses")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("fk_licenses_accounts_account_id");

                    b.HasOne("CloudSalesSystem.Domain.SubscriptionItems.SubscriptionItem", "SubscriptionItem")
                        .WithMany("Licenses")
                        .HasForeignKey("SubscriptionItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_licenses_subscription_item_subscription_item_id");

                    b.Navigation("Account");

                    b.Navigation("SubscriptionItem");
                });

            modelBuilder.Entity("CloudSalesSystem.Domain.SubscriptionItems.SubscriptionItem", b =>
                {
                    b.HasOne("CloudSalesSystem.Domain.Subscriptions.Subscription", "Subscription")
                        .WithMany("SubscriptionItems")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subscription_items_subscriptions_subscription_id");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("CloudSalesSystem.Domain.Accounts.Account", b =>
                {
                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("CloudSalesSystem.Domain.Customers.Customer", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("CustomerSubscriptions");
                });

            modelBuilder.Entity("CloudSalesSystem.Domain.SubscriptionItems.SubscriptionItem", b =>
                {
                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("CloudSalesSystem.Domain.Subscriptions.Subscription", b =>
                {
                    b.Navigation("CustomerSubscriptions");

                    b.Navigation("SubscriptionItems");
                });
#pragma warning restore 612, 618
        }
    }
}
